int n, m, mx, cnt, a[N], f[N], vis[N], dth[N];
queue<int>qe;
vector<int>e[N],e2[N];
int fd(int x){
    if (x != f[x])f[x] = fd(f[x]);
    return f[x];
}
void dfs(int u)
{
    vis[u]=1;
    for (auto v:e[u])
    {
        if (!dth[v]) {
            dth[v] = dth[u] + 1;
            dfs(v);
        }
        int fu = fd(u), fv = fd(v);
        if (dth[fv])dth[fu] < dth[fv] ? f[fv] = fu : f[fu] = fv;
    }
    dth[u] = 0;
}
int solve()
{
    cin >> n >> m;int u,v;
    for (int i = 1; i <= n; i++)cin>>a[i], f[i] = i;
    for (int i = 1; i <= m; i++){cin>>u>>v;e[u].push_back(v);}
    for (int i = 1; i <= n; i++) {
        if (!vis[i]) {
            dth[i] = 1;
            dfs(i);
        }
    }
}
